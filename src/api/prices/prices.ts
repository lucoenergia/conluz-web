/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Conluz API
 * Conluz is an API-driven application designed for the efficient management of an energy community,enabling the administration of community members and their corresponding supply points and the retrieval of consumption, production data.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetPriceByRangeOfDatesParams,
  PriceByHour
} from '.././models';

import { customInstance } from '.././custom-instance';
import type { ErrorType } from '.././custom-instance';




/**
 * This endpoint enables users to access detailed hourly energy prices within a specified date interval, offering insights into cost variations over time. Clients can include query parameters to define the start and end dates, allowing for flexible customization of the data retrieved. Proper authentication, through an authentication token, is required for secure access to this endpoint. A successful request returns an HTTP status code of 200, delivering a dataset that includes timestamped energy prices for each hour within the specified interval. In cases of errors or invalid parameters, the server responds with an appropriate error status code accompanied by a descriptive message to guide users in resolving any issues. This endpoint serves as a valuable tool for monitoring and analyzing historical energy pricing trends within the system.
 * @summary Retrieve hourly energy prices within a specified date interval.
 */
export const getPriceByRangeOfDates = (
    params: GetPriceByRangeOfDatesParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PriceByHour[]>(
      {url: `/api/v1/prices`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetPriceByRangeOfDatesQueryKey = (params: GetPriceByRangeOfDatesParams,) => {
    return [`/api/v1/prices`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPriceByRangeOfDatesQueryOptions = <TData = Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError = ErrorType<unknown>>(params: GetPriceByRangeOfDatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriceByRangeOfDatesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriceByRangeOfDates>>> = ({ signal }) => getPriceByRangeOfDates(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPriceByRangeOfDatesQueryResult = NonNullable<Awaited<ReturnType<typeof getPriceByRangeOfDates>>>
export type GetPriceByRangeOfDatesQueryError = ErrorType<unknown>


export function useGetPriceByRangeOfDates<TData = Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError = ErrorType<unknown>>(
 params: GetPriceByRangeOfDatesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceByRangeOfDates>>,
          TError,
          Awaited<ReturnType<typeof getPriceByRangeOfDates>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceByRangeOfDates<TData = Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError = ErrorType<unknown>>(
 params: GetPriceByRangeOfDatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriceByRangeOfDates>>,
          TError,
          Awaited<ReturnType<typeof getPriceByRangeOfDates>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriceByRangeOfDates<TData = Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError = ErrorType<unknown>>(
 params: GetPriceByRangeOfDatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieve hourly energy prices within a specified date interval.
 */

export function useGetPriceByRangeOfDates<TData = Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError = ErrorType<unknown>>(
 params: GetPriceByRangeOfDatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriceByRangeOfDates>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPriceByRangeOfDatesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



