/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Conluz API
 * Conluz is an API-driven application designed for the efficient management of an energy community,enabling the administration of community members and their corresponding supply points and the retrieval of consumption, production data.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ConfigureDatadisBody
} from '.././models';

import { customInstance } from '.././custom-instance';
import type { ErrorType } from '.././custom-instance';




/**
 * This endpoint allows to configure the app to connect with datadis.es.

This configuration is a mandatory step to be able to retrieve consumption data from datadis.es.

Authentication is mandated, utilizing an authentication token, to ensure secure access.
**Required Role: ADMIN**

Upon successful request, the server responds with an HTTP status code of 200, along with details
about the configuration already set.

In cases where the creation process encounters errors, the server responds with an appropriate error
status code, accompanied by a descriptive error message to guide clients in addressing and resolving
the issue.

 * @summary Sets up the configuration to be able to connect with Datadis.
 */
export const configureDatadis = (
    configureDatadisBody: ConfigureDatadisBody,
 ) => {
      
      
      return customInstance<unknown>(
      {url: `/api/v1/consumption/datadis/config`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: configureDatadisBody
    },
      );
    }
  


export const getConfigureDatadisMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof configureDatadis>>, TError,{data: ConfigureDatadisBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof configureDatadis>>, TError,{data: ConfigureDatadisBody}, TContext> => {

const mutationKey = ['configureDatadis'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof configureDatadis>>, {data: ConfigureDatadisBody}> = (props) => {
          const {data} = props ?? {};

          return  configureDatadis(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ConfigureDatadisMutationResult = NonNullable<Awaited<ReturnType<typeof configureDatadis>>>
    export type ConfigureDatadisMutationBody = ConfigureDatadisBody
    export type ConfigureDatadisMutationError = ErrorType<unknown>

    /**
 * @summary Sets up the configuration to be able to connect with Datadis.
 */
export const useConfigureDatadis = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof configureDatadis>>, TError,{data: ConfigureDatadisBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof configureDatadis>>,
        TError,
        {data: ConfigureDatadisBody},
        TContext
      > => {

      const mutationOptions = getConfigureDatadisMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * This endpoint enables users to synchronize the consumptions of all active supplies retrieving the information from datadis.es.

Proper authentication, through an authentication token, is required for secure access to this endpoint.
**Required Role: ADMIN**

A successful request returns an HTTP status code of 200.

In cases of errors, the server responds with an appropriate error status code accompanied by a
descriptive message to guide users in resolving any issues.",

 * @summary Synchronize the consumptions of all active supplies retrieving the information from datadis.es.
 */
export const syncDatadisConsumptions = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/v1/consumption/datadis/sync`, method: 'POST', signal
    },
      );
    }
  


export const getSyncDatadisConsumptionsMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof syncDatadisConsumptions>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof syncDatadisConsumptions>>, TError,void, TContext> => {

const mutationKey = ['syncDatadisConsumptions'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof syncDatadisConsumptions>>, void> = () => {
          

          return  syncDatadisConsumptions()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SyncDatadisConsumptionsMutationResult = NonNullable<Awaited<ReturnType<typeof syncDatadisConsumptions>>>
    
    export type SyncDatadisConsumptionsMutationError = ErrorType<unknown>

    /**
 * @summary Synchronize the consumptions of all active supplies retrieving the information from datadis.es.
 */
export const useSyncDatadisConsumptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof syncDatadisConsumptions>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof syncDatadisConsumptions>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getSyncDatadisConsumptionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    